geoip_demo(ip as string)
| lookup country as string, city as string from ipgeolocation on ip
;

geoip_demo_explode(ip as array)
| explode ip as string
| lookup country as string, city as string from ipgeolocation on ip
;

nyc_taxi_demo_1_lookup_online_store(pu_loc_id as int, do_loc_id as int, pu_time as string, do_time as string, trip_distance as double, fare_amount as double)
| lookup pu_loc_avg_fare = f_location_avg_fare, pu_loc_max_fare = f_location_max_fare from feathrci on pu_loc_id
| lookup do_loc_avg_fare = f_location_avg_fare, do_loc_max_fare = f_location_max_fare from feathrci on do_loc_id
;

nyc_taxi_demo_2_lookup_address(pu_loc_id as int, do_loc_id as int, pu_time as string, do_time as string, trip_distance as double, fare_amount as double)
| lookup pu_loc_name = name as string from locationsvc on pu_loc_id
| lookup do_loc_name = name as string from locationsvc on do_loc_id
;

nyc_taxi_demo_3_local_compute(pu_loc_id as int, do_loc_id as int, pu_time as string, do_time as string, trip_distance as double, fare_amount as double)
| project duration_second = (to_unix_timestamp(do_time, "%Y/%-m/%-d %-H:%-M") - to_unix_timestamp(pu_time, "%Y/%-m/%-d %-H:%-M"))
| project speed_mph = trip_distance * 3600 / duration_second
;

nyc_taxi_demo(pu_loc_id as int, do_loc_id as int, pu_time as string, do_time as string, trip_distance as double, fare_amount as double)
| lookup pu_loc_avg_fare = f_location_avg_fare, pu_loc_max_fare = f_location_max_fare from feathrci on pu_loc_id
| lookup do_loc_avg_fare = f_location_avg_fare, do_loc_max_fare = f_location_max_fare from feathrci on do_loc_id
| lookup pu_loc_name = name as string from locationsvc on pu_loc_id
| lookup do_loc_name = name as string from locationsvc on do_loc_id
| project duration_second = (to_unix_timestamp(do_time, "%Y/%-m/%-d %-H:%-M") - to_unix_timestamp(pu_time, "%Y/%-m/%-d %-H:%-M"))
| project speed_mph = trip_distance * 3600 / duration_second
;

t(x)
| project y=x+42, z=x-42
;

test_join_inner(id as int)
| join kind=left-inner name, age from join_test on id
| summarize avg_age=avg(double(age)), names=array_agg(name) by id
| explode names
;

test_join_outer(id as int)
| join kind=left-outer name, age from join_test on id
| summarize avg_age=avg(double(age)), names=array_agg(name) by id
| explode names
;

test_lookup_cosmos(id as int)
| lookup f_location_avg_fare, f_location_max_fare from cosmos1 on id
;


test_lookup_cosmos_query(id)
| join kind=left-inner f_location_avg_fare, f_location_max_fare from cosmos2 on id
;

# ID is the internal ID of the movie in local data set
# Returned `tmdb_url` is the URL of the movie in TMDB.
# and `imdb_url` is the URL of the movie in IMDB.
movie_metadata(id)
| lookup tmdb_id = tmdbId as long from links on id
| project-rename movie_id = id
| lookup genres1 = genres,homepage,imdb_id,overview,poster_path,release_date1=release_date,runtime,title,vote_average,vote_count from metadata on tmdb_id
| project image_url = "https://image.tmdb.org/t/p/original" + poster_path
| project release_date=date(release_date1), genres = get_json_array(translate(genres1, "'", "\""), "$[*].name")
| project imdb_url = "https://www.imdb.com/title/" + string(imdb_id), tmdb_url = "https://www.themoviedb.org/movie/" + string(tmdb_id)
| project-remove poster_path, genres1, release_date1, imdb_id, tmdb_id
;

multi_movie_metadata(id)
| explode id as long
| lookup tmdb_id = tmdbId as long from links on id
| project-rename movie_id = id
| lookup genres1 = genres,homepage,imdb_id,overview,poster_path,release_date1=release_date,runtime,title,vote_average,vote_count from metadata on tmdb_id
| project image_url = "https://image.tmdb.org/t/p/original" + poster_path
| project release_date=date(release_date1), genres = get_json_array(translate(genres1, "'", "\""), "$[*].name")
| project imdb_url = "https://www.imdb.com/title/" + string(imdb_id), tmdb_url = "https://www.themoviedb.org/movie/" + string(tmdb_id)
| project-remove poster_path, genres1, release_date1, imdb_id, tmdb_id
;

movie_recommend_ids(id)
| lookup movie_id = ids from recommender on id
| explode movie_id as long
| lookup tmdb_id = tmdbId as long from links on movie_id
;

# Call the model API to get recommended movie IDs, then use the movie IDs to get movie metadata
movie_recommend(id)
# The model api returns movie IDs in an array
| lookup movie_id = ids from recommender on id
# So we need to explode it to get each movie ID
| explode movie_id as long
# Lookup for TMDB id, which is in the "links" table
| lookup tmdb_id = tmdbId as long from links on movie_id
# Lookup for movie metadata, which is in the "metadata" table
| lookup genres1 = genres,homepage,imdb_id,overview,poster_path,release_date1=release_date,runtime,title,vote_average,vote_count from metadata on tmdb_id
| project image_url = "https://image.tmdb.org/t/p/original" + poster_path
# The "genres" field is a JSON array, so we need to parse it, and then get the "name" field only
| project release_date=date(release_date1), genres = get_json_array(translate(genres1, "'", "\""), "$[*].name")
| project imdb_url = "https://www.imdb.com/title/" + string(imdb_id), tmdb_url = "https://www.themoviedb.org/movie/" + string(tmdb_id)
# Remove unnecessary fields
| project-remove poster_path, genres1, release_date1, imdb_id, tmdb_id
;
